[{"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\index.js":"1","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\serviceWorker.js":"2","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App.js":"3","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\firebase.js":"4","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\bootstrap.js":"5","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\unauthenticated-app.js":"6","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\authenticated-app.js":"7","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\components.js":"8","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\context.js":"9","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\withAuthetication.js":"10","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\withAuthorization.js":"11","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\config\\routes.js":"12","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\login\\index.js":"13","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\signup\\index.js":"14","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\resetPassword\\index.js":"15","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\index.js":"16","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\index.js":"17","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\index.js":"18","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\mob.js":"19","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\footer.js":"20","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\button.js":"21","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\mob.js":"22","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\textField.js":"23","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\sidebar.js":"24","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\menu.js":"25","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\moduleContent.js":"26","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\social.js":"27","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\liveClass.js":"28","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\profilePage.js":"29","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\views\\views.js":"30","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\deleteUsers.js":"31","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\createModule.js":"32","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\profilePage.js":"33","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\components\\Footer\\footer.js":"34","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\screens\\profilePage.js":"35","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\permissions.js":"36","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\menu.js":"37","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\views\\views.js":"38","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\addUsers.js":"39","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\mob.js":"40","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\permissions.js":"41","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\menu.js":"42","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\views\\views.js":"43","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\mobMenu.js":"44","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\loader.js":"45","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\loader.js":"46","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\loader.js":"47","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\styles\\colors.js":"48","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\LiveSupport.js":"49","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\QuizTests\\QuizTests.js":"50","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Module.js":"51","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\index.js":"52","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\complete-payment\\index.js":"53","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\CartSucess\\index.js":"54","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\MenuLive.js":"55","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\Tabs.js":"56","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\complete-payment\\country.js":"57","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\Code.js":"58","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\shared\\Menu\\Menu.js":"59","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\Fundamentals\\Fundamentals.js":"60","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\JavaScript\\JavaScript.js":"61","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\VersionControl\\VersionControl.js":"62"},{"size":689,"mtime":1607507824178,"results":"63","hashOfConfig":"64"},{"size":5227,"mtime":1605592547202,"results":"65","hashOfConfig":"64"},{"size":1395,"mtime":1607673951991,"results":"66","hashOfConfig":"64"},{"size":2451,"mtime":1607673952022,"results":"67","hashOfConfig":"64"},{"size":73,"mtime":1605592547124,"results":"68","hashOfConfig":"64"},{"size":897,"mtime":1607673952381,"results":"69","hashOfConfig":"64"},{"size":2670,"mtime":1607673952372,"results":"70","hashOfConfig":"64"},{"size":972,"mtime":1607673952332,"results":"71","hashOfConfig":"64"},{"size":115,"mtime":1607673952350,"results":"72","hashOfConfig":"64"},{"size":1000,"mtime":1607673952351,"results":"73","hashOfConfig":"64"},{"size":2524,"mtime":1607673952370,"results":"74","hashOfConfig":"64"},{"size":633,"mtime":1607673952334,"results":"75","hashOfConfig":"64"},{"size":4566,"mtime":1607673952339,"results":"76","hashOfConfig":"64"},{"size":7626,"mtime":1607673952349,"results":"77","hashOfConfig":"64"},{"size":4386,"mtime":1607673952347,"results":"78","hashOfConfig":"64"},{"size":12548,"mtime":1607673952109,"results":"79","hashOfConfig":"64"},{"size":8312,"mtime":1607673952028,"results":"80","hashOfConfig":"64"},{"size":7938,"mtime":1607673952181,"results":"81","hashOfConfig":"64"},{"size":5234,"mtime":1605592547108,"results":"82","hashOfConfig":"64"},{"size":638,"mtime":1607673952335,"results":"83","hashOfConfig":"64"},{"size":668,"mtime":1606109983080,"results":"84","hashOfConfig":"64"},{"size":5657,"mtime":1605592547124,"results":"85","hashOfConfig":"64"},{"size":2420,"mtime":1607673952337,"results":"86","hashOfConfig":"64"},{"size":1187,"mtime":1607673952336,"results":"87","hashOfConfig":"64"},{"size":3146,"mtime":1607673952043,"results":"88","hashOfConfig":"64"},{"size":765,"mtime":1607673952091,"results":"89","hashOfConfig":"64"},{"size":2705,"mtime":1607673952098,"results":"90","hashOfConfig":"64"},{"size":4633,"mtime":1607673952178,"results":"91","hashOfConfig":"64"},{"size":16447,"mtime":1606977660360,"results":"92","hashOfConfig":"64"},{"size":3153,"mtime":1606977660298,"results":"93","hashOfConfig":"64"},{"size":5154,"mtime":1607673952040,"results":"94","hashOfConfig":"64"},{"size":5119,"mtime":1607673952031,"results":"95","hashOfConfig":"64"},{"size":16051,"mtime":1606977660437,"results":"96","hashOfConfig":"64"},{"size":721,"mtime":1606977623298,"results":"97","hashOfConfig":"64"},{"size":16468,"mtime":1606977660360,"results":"98","hashOfConfig":"64"},{"size":2029,"mtime":1607673952180,"results":"99","hashOfConfig":"64"},{"size":1912,"mtime":1606977623444,"results":"100","hashOfConfig":"64"},{"size":3209,"mtime":1606977623446,"results":"101","hashOfConfig":"64"},{"size":5798,"mtime":1607673952030,"results":"102","hashOfConfig":"64"},{"size":5333,"mtime":1606109982861,"results":"103","hashOfConfig":"64"},{"size":2678,"mtime":1607673952025,"results":"104","hashOfConfig":"64"},{"size":2861,"mtime":1607673742292,"results":"105","hashOfConfig":"64"},{"size":5476,"mtime":1606109982830,"results":"106","hashOfConfig":"64"},{"size":4276,"mtime":1607673952090,"results":"107","hashOfConfig":"64"},{"size":581,"mtime":1606977660360,"results":"108","hashOfConfig":"64"},{"size":581,"mtime":1606977660437,"results":"109","hashOfConfig":"64"},{"size":581,"mtime":1606977660298,"results":"110","hashOfConfig":"64"},{"size":122,"mtime":1607673952371,"results":"111","hashOfConfig":"64"},{"size":6044,"mtime":1607673952281,"results":"112","hashOfConfig":"64"},{"size":2429,"mtime":1607673952018,"results":"113","hashOfConfig":"64"},{"size":487,"mtime":1607673952141,"results":"114","hashOfConfig":"64"},{"size":2030,"mtime":1607673952172,"results":"115","hashOfConfig":"64"},{"size":9841,"mtime":1607673952167,"results":"116","hashOfConfig":"64"},{"size":3710,"mtime":1607673952143,"results":"117","hashOfConfig":"64"},{"size":1408,"mtime":1607673952283,"results":"118","hashOfConfig":"64"},{"size":11068,"mtime":1607673952330,"results":"119","hashOfConfig":"64"},{"size":30462,"mtime":1607673952157,"results":"120","hashOfConfig":"64"},{"size":2560,"mtime":1607673952121,"results":"121","hashOfConfig":"64"},{"size":632,"mtime":1606977623443,"results":"122","hashOfConfig":"64"},{"size":2388,"mtime":1607673952123,"results":"123","hashOfConfig":"64"},{"size":2896,"mtime":1607673952125,"results":"124","hashOfConfig":"64"},{"size":2492,"mtime":1607673952126,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"vt5z4k",{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"128"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"128"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"128"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"128"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\index.js",[],["255","256"],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\serviceWorker.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\firebase.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\bootstrap.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\unauthenticated-app.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\authenticated-app.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\components.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\context.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\withAuthetication.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\session\\withAuthorization.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\config\\routes.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\login\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\signup\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\resetPassword\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\index.js",["257"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Footer from '../../components/Footer/footer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Menu from './components/menu';\r\nimport Permissions from './components/moduleContent';\r\nimport Mobile from './mob';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Views from './components/views/views'\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport SocialIcons from './components/social';\r\nimport ProfilePage from './screens/profilePage';\r\nimport LiveClass from './screens/liveClass';\r\nimport *as ROUTES from '../../config/routes';\r\nimport FirebaseContext from 'firebase';\r\nimport 'firebase/firestore';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'none'\r\n    }\r\n  },\r\n  desktop: {\r\n    \r\n  },\r\n  appBar: {\r\n    backgroundColor: '#0000FF',\r\n    boxShadow: 'none',\r\n    borderLeft: '1px solid white',\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n    backgroundColor: '#0000FF',\r\n    color: 'white',\r\n    overflow: 'hidden'\r\n  },\r\n  paper: {\r\n    margin: 'auto',\r\n    width: '80%'\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n\r\n  fab: {\r\n    margin: theme.spacing(0),\r\n    backgroundColor: 'white',\r\n    '&:hover': {\r\n      backgroundColor: 'white',\r\n    },\r\n  },\r\n}));\r\n\r\n// Define routes in the Trainees\r\nconst routes = [\r\n  {\r\n    path: ROUTES.TRAINEE,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n       {/* Views */}\r\n       <Views />\r\n    </div>\r\n  },\r\n\r\n  {\r\n    path: ROUTES.PROFILE,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n      <ProfilePage/>\r\n    </div>\r\n  },\r\n\r\n  {\r\n    path: ROUTES.ASSESSMENTS,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n      Final Assessments page\r\n    </div>\r\n  },\r\n\r\n  {\r\n    path: ROUTES.INTERVIEWS,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n      Interviews page\r\n    </div>\r\n  },\r\n\r\n  {\r\n    path: ROUTES.HIRED,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n      Hire page\r\n    </div>\r\n  },\r\n\r\n  {\r\n    path: ROUTES.LIVE_CLASS,\r\n    exact: true,\r\n    sidebar: () => <div></div>,\r\n    main: () => <div>\r\n      <LiveClass/>\r\n    </div>\r\n  },\r\n];\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(true);\r\n  const [currentUserDetails, setcurrentUserDetails] = React.useState({name:'', email:'', password:'', photo: ''})\r\n\r\n\r\n  class userDetails {\r\n    constructor (name, email, password, photo ) {\r\n        this.name = name;\r\n        this.email = email;\r\n        this.password = password;\r\n        this.photo= photo;\r\n    }\r\n    // toString() {\r\n    //     return this.name + ', ' + this.email + ', ' + this.password;\r\n    // }\r\n  }\r\n\r\n// Firestore data converter\r\n  var userDetailsConverter = {\r\n      toFirestore: function(userDetails) {\r\n          return {\r\n              name: userDetails.name,\r\n              email: userDetails.email,\r\n              password: userDetails.password,\r\n              photo: userDetails.photo\r\n              }\r\n      },\r\n      fromFirestore: function(snapshot, options){\r\n          const data = snapshot.data(options);\r\n          const det1 = new userDetails(data.name, data.email, data.password, data.photo);\r\n          return det1\r\n      }\r\n  }\r\n  React.useEffect(() => {\r\n        let user = FirebaseContext.auth().currentUser;   \r\n        let db = FirebaseContext.firestore().collection('users/trainee/users');\r\n        let query = db.where('userId', '==', user.uid);\r\n        \r\n        query.withConverter(userDetailsConverter).get()\r\n        .then(snapshot => {\r\n            if (snapshot.empty) {\r\n            console.log('No matching documents.');\r\n            return;\r\n            }  \r\n\r\n            snapshot.forEach(doc => {\r\n                var x = doc.data();\r\n                setcurrentUserDetails(x)\r\n            // console.log(doc.id, '=>', x);\r\n            ;\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log('Error getting documents', err);\r\n        });\r\n  }, [userDetailsConverter]);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <div className={classes.root}>\r\n          <CssBaseline />\r\n            <AppBar\r\n              position=\"fixed\"\r\n              className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n              })}\r\n            >\r\n            <Toolbar>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"open drawer\"\r\n                onClick={handleDrawerOpen}\r\n                edge=\"start\"\r\n                className={clsx(classes.menuButton, open && classes.hide)}\r\n              >\r\n                <MenuIcon />\r\n              </IconButton>\r\n\r\n              <div style={{margin: 'auto'}}>\r\n                <Typography noWrap>\r\n                    SKYLLA LEARNING COMMUNITY\r\n                </Typography>\r\n              </div>\r\n\r\n              <div style={{textAlign: 'center'}}>\r\n                <Avatar alt=\"Remy Sharp\" style={{marginLeft:'27%'}} src={currentUserDetails.photo} />\r\n                <Typography variant=\"body2\">\r\n                   <b>{currentUserDetails.name}</b>\r\n                </Typography>\r\n              </div>\r\n\r\n              <div style={{textAlign: 'center', margin: 15}}>\r\n                <Avatar alt=\"Remy Sharp\" src=\"\" />\r\n                <Typography variant=\"body2\">\r\n                  Trainer\r\n                </Typography>\r\n              </div>\r\n\r\n              <div style={{textAlign: 'center'}}>\r\n                <Link to={ROUTES.MODULES}>\r\n                  <Tooltip title=\"Cart\" aria-label=\"Cart\" style={{color: '#0000FF',}}>\r\n                      <Fab color=\"primary\" className={classes.fab}>\r\n                        <AddShoppingCartIcon style={{}} />\r\n                      </Fab>\r\n                  </Tooltip>\r\n                </Link>\r\n              </div>\r\n              \r\n            </Toolbar>\r\n          </AppBar>\r\n\r\n          <Router>\r\n            <Drawer\r\n              className={classes.drawer}\r\n              variant=\"persistent\"\r\n              anchor=\"left\"\r\n              open={open}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n            >\r\n            <div className={classes.drawerHeader} open={open}>\r\n              <IconButton onClick={handleDrawerClose} style={{color: 'white'}}>\r\n                {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n              </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <div className={classes.paper}>\r\n              <Menu />\r\n            </div>\r\n\r\n            <Divider \r\n              style={{\r\n                backgroundColor: 'white',\r\n                width: '90%',\r\n                margin: 'auto',\r\n              }}\r\n            />\r\n\r\n            <div className={classes.paper}> \r\n              <Permissions />\r\n            </div>\r\n\r\n            <Divider \r\n              style={{\r\n                backgroundColor: 'white',\r\n                width: '90%',\r\n                margin: 'auto',\r\n              }}\r\n            />\r\n\r\n            <div className={classes.paper}> \r\n              <SocialIcons />\r\n            </div>\r\n            \r\n            <Switch>\r\n              {routes.map((route, index) => (\r\n                // You can render a <Route> in as many places\r\n                // as you want in your app. It will render along\r\n                // with any other <Route>s that also match the URL.\r\n                // So, a sidebar or breadcrumbs or anything else\r\n                // that requires you to render multiple things\r\n                // in multiple places at the same URL is nothing\r\n                // more than multiple <Route>s.\r\n                <Route\r\n                  key={index}\r\n                  path={route.path}\r\n                  exact={route.exact}\r\n                  children={<route.sidebar />}\r\n                />\r\n              ))}\r\n            </Switch>\r\n          </Drawer>\r\n          <main\r\n            className={clsx(classes.content, {\r\n              [classes.contentShift]: open,\r\n            })}\r\n          >\r\n            <div className={classes.drawerHeader} style={{marginTop: -50}} />\r\n            <Switch>\r\n              {routes.map((route, index) => (\r\n                // Render more <Route>s with the same paths as\r\n                // above, but different components this time.\r\n                <Route\r\n                  key={index}\r\n                  path={route.path}\r\n                  exact={route.exact}\r\n                  children={<route.main />}\r\n                />\r\n              ))}\r\n            </Switch>\r\n\r\n            <div style={{marginTop: 40}}>\r\n              <Footer />\r\n            </div>\r\n          </main>\r\n        </Router>\r\n      </div>\r\n\r\n      {/* mobile */}\r\n      <Mobile />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\mob.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\footer.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\button.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\mob.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\textField.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\components\\sidebar.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\menu.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\moduleContent.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\social.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\liveClass.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\profilePage.js",["258"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Paper,\r\n    ButtonBase,\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LoaderButton from \"../components/loader\";\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport FirebaseContext from 'firebase';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport TextFieldMui from \"../../components/textField\";\r\nimport 'firebase/firestore';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: 'transparent',\r\n        width: '100%',\r\n        height: 'auto',\r\n        margin: '5% 0 0 0'\r\n    },\r\n\r\n    BioData: {\r\n        padding: 20,\r\n        flexGrow: 1\r\n    },\r\n\r\n    pPic: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '50%',\r\n    },\r\n\r\n    paper: {\r\n        padding: theme.spacing(4),\r\n        margin: 'auto auto auto 0',\r\n    },\r\n\r\n    image: {\r\n        width: 180,\r\n        height: 180,\r\n        borderRadius: 'auto',\r\n    },\r\n\r\n    input: {\r\n        display: 'none',\r\n    },\r\n\r\n    uploadButton: {\r\n        position: 'absolute',\r\n        margin: '30% 0 0 70%',\r\n        backgroundColor: '#EDEDED'\r\n    },\r\n\r\n    margin: {\r\n        margin: theme.spacing(3,7),\r\n    },\r\n\r\n    textField: {\r\n        width: '400px',\r\n        display: 'block'\r\n    },\r\n}));\r\n\r\nconst initialState = {\r\n    Oldpassword: '',\r\n    Newpassword: '',\r\n    ConfirmNewpassword: '',\r\n    showPassword: false,\r\n};\r\n\r\n\r\nexport default function ProfilePage() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState(initialState);\r\n      const [isChanging, setIsChanging] = React.useState(false);\r\n    const [isnotChangingP, setIsnotChangingP] = React.useState(false);\r\n    const [isChangingP, setIsChangingP] = React.useState(false);\r\n        // const allInputs = {imgUrl: ''}\r\n        const [imageAsFile, setImageAsFile] = React.useState('')\r\n        const [imageAsUrl, setImageAsUrl] = React.useState({imgUrl: ''})\r\n      const [currentUserDetails, setcurrentUserDetails] = React.useState({name:'', email:'', password:'', photo: ''})\r\n      const clearState = () => {\r\n        setValues({ ...initialState });\r\n      };\r\n\r\n    //   console.log(imageAsFile)\r\n        const handleImageAsFile = (e) => {\r\n            const image = e.target.files[0]\r\n        setImageAsFile(imageFile => (image))\r\n        }\r\n\r\n        const handleFireBaseUpload = e => {\r\n            e.preventDefault()\r\n          console.log('start of upload')\r\n          // async magic goes here...\r\n          if(imageAsFile === '') {\r\n            console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\r\n          }\r\n          let userCurrent = FirebaseContext.auth().currentUser;\r\n          const uploadTask = FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).put(imageAsFile)\r\n          //initiates the firebase side uploading \r\n          uploadTask.on('state_changed', \r\n          (snapShot) => {\r\n            //takes a snap shot of the process as it is happening\r\n            console.log(snapShot)\r\n          }, (err) => {\r\n            //catches the errors\r\n            console.log(err)\r\n          }, () => {\r\n            // gets the functions from storage refences the image storage in firebase by the children\r\n            // gets the download url then sets the image from firebase as the value for the imgUrl key:\r\n            FirebaseContext.auth().onAuthStateChanged(user => {\r\n                if(user) {\r\n                    FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).getDownloadURL()\r\n                    .then(fireBaseUrl => {\r\n                    setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\r\n                    // console.log(fireBaseUrl)\r\n                    let db = FirebaseContext.firestore().collection(\"users/trainee/users\");\r\n                    db.doc(userCurrent.uid).update({\r\n                        photo: fireBaseUrl\r\n                      });\r\n                    })\r\n                    setIsChanging(true);\r\n                }\r\n            })\r\n          })\r\n        //   window.location.reload();\r\n          }\r\n      \r\n\r\n      class userDetails {\r\n        constructor (name, email, password, photo ) {\r\n            this.name = name;\r\n            this.email = email;\r\n            this.password = password;\r\n            this.photo= photo;\r\n        }\r\n        // toString() {\r\n        //     return this.name + ', ' + this.email + ', ' + this.password;\r\n        // }\r\n    }\r\n    \r\n    // Firestore data converter\r\n    var userDetailsConverter = {\r\n        toFirestore: function(userDetails) {\r\n            return {\r\n                name: userDetails.name,\r\n                email: userDetails.email,\r\n                password: userDetails.password,\r\n                photo: userDetails.photo\r\n                }\r\n        },\r\n        fromFirestore: function(snapshot, options){\r\n            const data = snapshot.data(options);\r\n            const det1 = new userDetails(data.name, data.email, data.password, data.photo);\r\n            return det1\r\n        }\r\n    }\r\n\r\n        function validateForm() {\r\n            return (\r\n            values.Oldpassword.length > 5 &&     //more validation checks needed for the old Password\r\n            values.Newpassword.length > 5 &&\r\n            values.Newpassword === values.ConfirmNewpassword\r\n            );\r\n        }\r\n        \r\n        React.useEffect(() => {\r\n            let user1 = FirebaseContext.auth().currentUser;\r\n            // let uID = FirebaseContext.firestore().collection(\"users\").doc(user1.uid)    \r\n            let db = FirebaseContext.firestore().collection(\"users/trainee/users\");\r\n            let query = db.where('userId', '==', user1.uid);\r\n\r\n            query.withConverter(userDetailsConverter).get()\r\n            .then(snapshot => {\r\n                if (snapshot.empty) {\r\n                console.log('No matching documents.');\r\n                return;\r\n                }  \r\n\r\n                snapshot.forEach(doc => {\r\n                    var x = doc.data();\r\n                    setcurrentUserDetails(x)\r\n                // console.log(doc.id, '=>', x);\r\n                ;\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log('Error getting documents', err);\r\n            });\r\n        }, [userDetailsConverter])\r\n\r\n        async function handleChangeClick(event) {\r\n            event.preventDefault();\r\n\r\n            const user = FirebaseContext.auth().currentUser;\r\n            let db = FirebaseContext.firestore().collection(\"users/trainee/users\");\r\n            if(values.Oldpassword===currentUserDetails.password){\r\n                db.doc(user.uid).update({\r\n                    password: values.Newpassword\r\n                    });\r\n                    // Get auth credentials from the user for re-authentication. The example below shows\r\n                    // email and password credentials but there are multiple possible providers,\r\n                    // such as GoogleAuthProvider or FacebookAuthProvider.\r\n                    const cred = FirebaseContext.auth.EmailAuthProvider.credential(\r\n                        user.email, \r\n                        currentUserDetails.password\r\n                    );\r\n                    FirebaseContext.auth().currentUser.reauthenticateWithCredential(cred)\r\n                    .then(() => {\r\n                    // User successfully reauthenticated.\r\n                    const newPass = values.Newpassword;\r\n                    console.log('Password updated successfully!');\r\n                    setIsChangingP(true)\r\n                    return FirebaseContext.auth().currentUser.updatePassword(newPass);\r\n                    \r\n                    \r\n                    })\r\n                    .catch((error) => { \r\n                        console.log(error); \r\n                    });\r\n                    \r\n                    // alert('Password changed successfully!');\r\n                    setIsChangingP(true);\r\n                    clearState()\r\n            }else{\r\n                // alert('Oops, please check Old Password!')\r\n                setIsnotChangingP(true);\r\n            }\r\n        }\r\n\r\n\r\n        const handleChange = (prop) => (event) => {\r\n            setValues({ ...values, [prop]: event.target.value });\r\n          };\r\n    \r\n          const handleClose = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }    \r\n                setIsChangingP(false);\r\n          };\r\n    \r\n          const closeUpload = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }\r\n                setIsChanging(false);\r\n          };\r\n    \r\n          const handleCloseNot = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }\r\n                setIsnotChangingP(false);\r\n          };\r\n\r\n  return (\r\n    <Paper elevation={0} className={classes.root}>\r\n        <div className={classes.paper}>\r\n            <Grid alignItems='center' justify=\"center\" container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <ButtonBase className={classes.image}>\r\n                        <form onSubmit={handleFireBaseUpload}>\r\n                            <input \r\n                                accept=\"image/*\" \r\n                                className={classes.input} \r\n                                onChange={handleImageAsFile} \r\n                                id=\"icon-button-file\" \r\n                                type=\"file\" \r\n                            />\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <IconButton \r\n                                    type=\"submit\" \r\n                                    className={classes.uploadButton} \r\n                                    color=\"primary\" \r\n                                    component=\"span\"\r\n                                >\r\n                                    <PhotoCamera />\r\n                                </IconButton>\r\n                                <LoaderButton\r\n                                    type=\"submit\"\r\n                                    disabled={!imageAsFile}\r\n                                    isLoading={isChanging}\r\n                                    style={{\r\n                                        margin: '200px 0 0 25%',\r\n                                        width:'50%',\r\n                                        position: 'absolute',\r\n                                    }}\r\n                                >\r\n                                    UPLOAD\r\n                                </LoaderButton>\r\n                                <Snackbar open={isChanging} autoHideDuration={6000} onClose={closeUpload}>\r\n                                    <Alert onClose={closeUpload} severity=\"success\">\r\n                                        Great! Photo updated successfully.\r\n                                    </Alert>\r\n                                </Snackbar>\r\n                            </label>\r\n                        </form>\r\n                        <img \r\n                            className={classes.pPic}  \r\n                            src={\r\n                                    imageAsUrl.imgUrl || \r\n                                    currentUserDetails.photo || \r\n                                    'https://www.pngitem.com/pimgs/m/442-4426913_avatar-icon-png-white-png-download-white-person.png'\r\n                                }\r\n                            alt=''\r\n                        />\r\n                    </ButtonBase>\r\n                    <Grid style={{\r\n                        margin: 20\r\n                    }}>\r\n                       <Grid alignItems='left' justify=\"left\" container spacing={2}>\r\n                            <Grid item>\r\n                                <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                    {currentUserDetails.name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" align='left' style={{ cursor: 'pointer', }}>\r\n                                    {currentUserDetails.email}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid alignItems='center' justify=\"center\" container spacing={2} xs={12} sm={6}>\r\n                    <form onSubmit={handleChangeClick}>\r\n                        <FormGroup className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                            <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                Change Password\r\n                            </Typography>\r\n                        </FormGroup>\r\n                        <FormGroup className={classes.margin}>\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='Old-Password'\r\n                                type= 'password'\r\n                                value={values.Oldpassword}\r\n                                onChange={handleChange('Oldpassword')}\r\n                                label='Old Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n                        \r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='New-Password'\r\n                                type= 'password'\r\n                                value={values.Newpassword}\r\n                                onChange={handleChange('Newpassword')}\r\n                                label='New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id=' Cofirm-New-Password'\r\n                                type= 'password'\r\n                                value={values.ConfirmNewpassword}\r\n                                onChange={handleChange('ConfirmNewpassword')}\r\n                                label='Cofirm New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <LoaderButton\r\n                                type=\"submit\"\r\n                                disabled={!validateForm()}\r\n                                isLoading={isChangingP}\r\n                                style={{\r\n                                    // marginLeft: '10%',\r\n                                    width:'100%'\r\n                                }}\r\n                            >\r\n                                Change\r\n                            </LoaderButton>\r\n                        </FormGroup>\r\n                        <Snackbar open={isChangingP} autoHideDuration={6000} onClose={handleClose}>\r\n                            <Alert onClose={handleClose} severity=\"success\">\r\n                                Great! Password changed successfully.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                        <Snackbar open={isnotChangingP} autoHideDuration={6000} onClose={handleCloseNot}>\r\n                            <Alert onClose={handleCloseNot} severity=\"error\">\r\n                                Oops! Check Old Password.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </form>\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\views\\views.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\deleteUsers.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\createModule.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\profilePage.js",["259"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Paper,\r\n    ButtonBase,\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LoaderButton from \"../components/loader\";\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport FirebaseContext from 'firebase';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport TextFieldMui from \"../../components/textField\";\r\nimport 'firebase/firestore';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: 'transparent',\r\n        width: '100%',\r\n        height: 'auto',\r\n        margin: '5% 0 0 0'\r\n    },\r\n\r\n    BioData: {\r\n        padding: 20,\r\n        flexGrow: 1\r\n    },\r\n\r\n    pPic: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '50%',\r\n    },\r\n\r\n    paper: {\r\n        padding: theme.spacing(4),\r\n        margin: 'auto auto auto 0',\r\n    },\r\n\r\n    image: {\r\n        width: 180,\r\n        height: 180,\r\n        borderRadius: 'auto',\r\n    },\r\n\r\n    input: {\r\n        display: 'none',\r\n    },\r\n\r\n    uploadButton: {\r\n        position: 'absolute',\r\n        margin: '30% 0 0 70%',\r\n        backgroundColor: '#EDEDED'\r\n    },\r\n\r\n    margin: {\r\n        margin: theme.spacing(3,7),\r\n    },\r\n\r\n    textField: {\r\n        width: '400px',\r\n        display: 'block'\r\n    },\r\n}));\r\n\r\nconst initialState = {\r\n    Oldpassword: '',\r\n    Newpassword: '',\r\n    ConfirmNewpassword: '',\r\n    showPassword: false,\r\n};\r\n\r\n\r\nexport default function ProfilePage() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState(initialState);\r\n    const [isChanging, setIsChanging] = React.useState(false);\r\n    const [isChangingP, setIsChangingP] = React.useState(false);\r\n    const [isnotChangingP, setIsnotChangingP] = React.useState(false);\r\n    const clearState = () => {\r\n        setValues({ ...initialState });\r\n    };\r\n    // const allInputs = {imgUrl: ''}\r\n    const [imageAsFile, setImageAsFile] = React.useState('')\r\n    const [imageAsUrl, setImageAsUrl] = React.useState({imgUrl: ''})\r\n    const [currentUserDetails, setcurrentUserDetails] = React.useState({name:'', email:'', password:'', photo: ''})\r\n      \r\n\r\n    class userDetails {\r\n        constructor (name, email, password, photo ) {\r\n            this.name = name;\r\n            this.email = email;\r\n            this.password = password;\r\n            this.photo= photo;\r\n        }\r\n    }\r\n    \r\n    // Firestore data converter\r\n    var userDetailsConverter = {\r\n        toFirestore: function(userDetails) {\r\n            return {\r\n                name: userDetails.name,\r\n                email: userDetails.email,\r\n                password: userDetails.password,\r\n                photo: userDetails.photo\r\n            }\r\n        },\r\n        fromFirestore: function(snapshot, options){\r\n            const data = snapshot.data(options);\r\n            const det1 = new userDetails(data.name, data.email, data.password, data.photo);\r\n            return det1\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let user1 = FirebaseContext.auth().currentUser; \r\n        let db = FirebaseContext.firestore().collection(\"users/admin/users\");\r\n        let query = db.where('uid', '==', user1.uid);\r\n\r\n        query.withConverter(userDetailsConverter).get()\r\n        .then(snapshot => {\r\n            if (snapshot.empty) {\r\n            console.log('No matching documents.');\r\n            return;\r\n            }  \r\n\r\n            snapshot.forEach(doc => {\r\n                var x = doc.data();\r\n                setcurrentUserDetails(x)\r\n            // console.log(doc.id, '=>', x);\r\n            ;\r\n            })\r\n        })\r\n        .catch(err => {\r\n            console.log('Error getting documents', err);\r\n        });\r\n    }, [userDetailsConverter])\r\n\r\n    //   console.log('Image as a file:' + imageAsFile)\r\n        const handleImageAsFile = (e) => {\r\n            const image = e.target.files[0]\r\n        setImageAsFile(imageFile => (image))\r\n        }\r\n\r\n        const handleFireBaseUpload = e => {\r\n            e.preventDefault()\r\n          console.log('start of upload')\r\n          // async magic goes here...\r\n          if(imageAsFile === '') {\r\n            console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\r\n          }\r\n          let userCurrent = FirebaseContext.auth().currentUser;\r\n          const uploadTask = FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).put(imageAsFile)\r\n          //initiates the firebase side uploading \r\n          uploadTask.on('state_changed', \r\n          (snapShot) => {\r\n            //takes a snap shot of the process as it is happening\r\n            console.log(snapShot)\r\n          }, (err) => {\r\n            //catches the errors\r\n            console.log(err)\r\n          }, () => {\r\n            // gets the functions from storage refences the image storage in firebase by the children\r\n            // gets the download url then sets the image from firebase as the value for the imgUrl key:\r\n            FirebaseContext.auth().onAuthStateChanged(user => {\r\n                if(user) {\r\n                    FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).getDownloadURL()\r\n                    .then(fireBaseUrl => {\r\n                    setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\r\n                    console.log(imageAsUrl)\r\n                    let db = FirebaseContext.firestore().collection(\"users/admin/users\");\r\n                    db.doc(userCurrent.uid).update({\r\n                        photo: fireBaseUrl\r\n                      });\r\n                      \r\n                    })\r\n                    setIsChanging(true);\r\n                }\r\n            })\r\n          })\r\n            // alert('Image updated successfully! Please refresh page')\r\n          }\r\n      \r\n        function validateForm() {\r\n            return (\r\n            values.Oldpassword.length > 5 &&     \r\n            //more validation checks needed for the old Password\r\n            values.Newpassword.length > 5 &&\r\n            values.Newpassword === values.ConfirmNewpassword\r\n            );\r\n        }\r\n        \r\n\r\n        async function handleChangeClick(event) {\r\n            event.preventDefault();\r\n            const user = FirebaseContext.auth().currentUser;\r\n            let db = FirebaseContext.firestore().collection(\"users/admin/users\");\r\n            if(values.Oldpassword===currentUserDetails.password){\r\n                db.doc(user.uid).update({\r\n                    password: values.Newpassword\r\n                });\r\n                // Get auth credentials from the user for re-authentication. The example below shows\r\n                // email and password credentials but there are multiple possible providers,\r\n                // such as GoogleAuthProvider or FacebookAuthProvider.\r\n                const cred = FirebaseContext.auth.EmailAuthProvider.credential(\r\n                    user.email, \r\n                    currentUserDetails.password\r\n                );\r\n                FirebaseContext.auth().currentUser.reauthenticateWithCredential(cred)\r\n                .then(() => {\r\n                    // User successfully reauthenticated.\r\n                    const newPass = values.Newpassword;\r\n                    console.log('Password updated successfully!');\r\n                    setIsChangingP(true)\r\n                    return FirebaseContext.auth().currentUser.updatePassword(newPass);\r\n                })\r\n                .catch((error) => { \r\n                    console.log(error); \r\n                });\r\n                \r\n                // alert('Password changed successfully!');\r\n                setIsChangingP(true);\r\n                clearState()\r\n                // setIsChangingP(false);\r\n\r\n            }else{\r\n                // alert('Oops, please check Old Password!');\r\n                setIsnotChangingP(true);\r\n            }\r\n        }\r\n    \r\n      const handleChange = (prop) => (event) => {\r\n        setValues({ ...values, [prop]: event.target.value });\r\n      };\r\n\r\n      const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }    \r\n            setIsChangingP(false);\r\n      };\r\n\r\n      const closeUpload = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n            setIsChanging(false);\r\n      };\r\n\r\n      const handleCloseNot = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n            setIsnotChangingP(false);\r\n      };\r\n\r\n  return (\r\n    <Paper elevation={0} className={classes.root}>\r\n        <div className={classes.paper}>\r\n            <Grid alignItems='center' justify=\"center\" container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <ButtonBase className={classes.image}>\r\n                        <form onSubmit={handleFireBaseUpload}>\r\n                            <input \r\n                                accept=\"image/*\" \r\n                                className={classes.input} \r\n                                onChange={handleImageAsFile} \r\n                                id=\"icon-button-file\" \r\n                                type=\"file\" \r\n                            />\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <IconButton \r\n                                    type=\"submit\" \r\n                                    className={classes.uploadButton} \r\n                                    color=\"primary\" \r\n                                    component=\"span\"\r\n                                >\r\n                                    <PhotoCamera />\r\n                                </IconButton>\r\n                                <LoaderButton\r\n                                    type=\"submit\"\r\n                                    disabled={!imageAsFile}\r\n                                    isLoading={isChanging}\r\n                                    style={{\r\n                                        margin: '200px 0 0 25%',\r\n                                        width:'50%',\r\n                                        position: 'absolute',\r\n                                    }}\r\n                                >\r\n                                    UPLOAD\r\n                                </LoaderButton>\r\n                                <Snackbar open={isChanging} autoHideDuration={6000} onClose={closeUpload}>\r\n                                    <Alert onClose={closeUpload} severity=\"success\">\r\n                                        Great! Photo updated successfully.\r\n                                    </Alert>\r\n                                </Snackbar>\r\n                            </label>\r\n                        </form>\r\n                        <img \r\n                            className={classes.pPic}  \r\n                            src={\r\n                                    imageAsUrl.imgUrl || \r\n                                    currentUserDetails.photo || \r\n                                    'https://www.pngitem.com/pimgs/m/442-4426913_avatar-icon-png-white-png-download-white-person.png'\r\n                                }\r\n                            alt=''\r\n                        />\r\n                    </ButtonBase>\r\n                    <Grid style={{\r\n                        margin: 20\r\n                    }}>\r\n                        <Grid alignItems='left' justify=\"left\" container spacing={2}>\r\n                            <Grid item>\r\n                                <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                    {currentUserDetails.name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" align='left' style={{ cursor: 'pointer', }}>\r\n                                    {currentUserDetails.email}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid alignItems='center' justify=\"center\" container spacing={2} xs={12} sm={6}>\r\n                    <form onSubmit={handleChangeClick}>\r\n                        <FormGroup className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                            <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                Change Password\r\n                            </Typography>\r\n                        </FormGroup>\r\n                        <FormGroup className={classes.margin}>\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='Old-Password'\r\n                                type= 'password'\r\n                                value={values.Oldpassword}\r\n                                onChange={handleChange('Oldpassword')}\r\n                                label='Old Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n                        \r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='New-Password'\r\n                                type= 'password'\r\n                                value={values.Newpassword}\r\n                                onChange={handleChange('Newpassword')}\r\n                                label='New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id=' Cofirm-New-Password'\r\n                                type= 'password'\r\n                                value={values.ConfirmNewpassword}\r\n                                onChange={handleChange('ConfirmNewpassword')}\r\n                                label='Cofirm New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <LoaderButton\r\n                                type=\"submit\"\r\n                                disabled={!validateForm()}\r\n                                isLoading={isChangingP}\r\n                                style={{\r\n                                    // marginLeft: '10%',\r\n                                    width:'100%'\r\n                                }}\r\n                            >\r\n                                Change\r\n                            </LoaderButton>\r\n                        </FormGroup>\r\n                        <Snackbar open={isChangingP} autoHideDuration={6000} onClose={handleClose}>\r\n                            <Alert onClose={handleClose} severity=\"success\">\r\n                                Great! Password changed successfully.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                        <Snackbar open={isnotChangingP} autoHideDuration={6000} onClose={handleCloseNot}>\r\n                            <Alert onClose={handleCloseNot} severity=\"error\">\r\n                                Oops! Check Old Password.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </form>\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\components\\Footer\\footer.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\screens\\profilePage.js",["260"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    Paper,\r\n    ButtonBase,\r\n} from '@material-ui/core';\r\nimport clsx from 'clsx';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport LoaderButton from \"../components/loader\";\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport FirebaseContext from 'firebase';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport TextFieldMui from \"../../components/textField\";\r\nimport 'firebase/firestore';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: 'transparent',\r\n        width: '100%',\r\n        height: 'auto',\r\n        margin: '5% 0 0 0'\r\n    },\r\n\r\n    BioData: {\r\n        padding: 20,\r\n        flexGrow: 1\r\n    },\r\n\r\n    pPic: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '50%',\r\n    },\r\n\r\n    paper: {\r\n        padding: theme.spacing(4),\r\n        margin: 'auto auto auto 0',\r\n    },\r\n\r\n    image: {\r\n        width: 180,\r\n        height: 180,\r\n        borderRadius: 'auto',\r\n    },\r\n\r\n    input: {\r\n        display: 'none',\r\n    },\r\n\r\n    uploadButton: {\r\n        position: 'absolute',\r\n        margin: '30% 0 0 70%',\r\n        backgroundColor: '#EDEDED'\r\n    },\r\n\r\n    margin: {\r\n        margin: theme.spacing(3,7),\r\n    },\r\n\r\n    textField: {\r\n        width: '400px',\r\n        display: 'block'\r\n    },\r\n}));\r\n\r\nconst initialState = {\r\n    Oldpassword: '',\r\n    Newpassword: '',\r\n    ConfirmNewpassword: '',\r\n    showPassword: false,\r\n};\r\n\r\n\r\nexport default function ProfilePage() {\r\n    const classes = useStyles();\r\n    const [values, setValues] = React.useState(initialState);\r\n      const [isChanging, setIsChanging] = React.useState(false);\r\n    const [isnotChangingP, setIsnotChangingP] = React.useState(false);\r\n    const [isChangingP, setIsChangingP] = React.useState(false);\r\n        // const allInputs = {imgUrl: ''}\r\n        const [imageAsFile, setImageAsFile] = React.useState('')\r\n        const [imageAsUrl, setImageAsUrl] = React.useState({imgUrl: ''})\r\n      const [currentUserDetails, setcurrentUserDetails] = React.useState({name:'', email:'', password:'', photo: ''})\r\n      const clearState = () => {\r\n        setValues({ ...initialState });\r\n      };\r\n    //   console.log(imageAsFile)\r\n        const handleImageAsFile = (e) => {\r\n            const image = e.target.files[0]\r\n        setImageAsFile(imageFile => (image))\r\n        }\r\n\r\n        const handleFireBaseUpload = e => {\r\n            e.preventDefault()\r\n          console.log('start of upload')\r\n          // async magic goes here...\r\n          if(imageAsFile === '') {\r\n            console.error(`not an image, the image file is a ${typeof(imageAsFile)}`)\r\n          }\r\n          let userCurrent = FirebaseContext.auth().currentUser;\r\n          const uploadTask = FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).put(imageAsFile)\r\n          //initiates the firebase side uploading \r\n          uploadTask.on('state_changed', \r\n          (snapShot) => {\r\n            //takes a snap shot of the process as it is happening\r\n            console.log(snapShot)\r\n          }, (err) => {\r\n            //catches the errors\r\n            console.log(err)\r\n          }, () => {\r\n            // gets the functions from storage refences the image storage in firebase by the children\r\n            // gets the download url then sets the image from firebase as the value for the imgUrl key:\r\n            FirebaseContext.auth().onAuthStateChanged(user => {\r\n                if(user) {\r\n                    FirebaseContext.storage().ref('users/' + userCurrent.uid + `/${imageAsFile.name}`).getDownloadURL()\r\n                    .then(fireBaseUrl => {\r\n                    setImageAsUrl(prevObject => ({...prevObject, imgUrl: fireBaseUrl}))\r\n                    // console.log(fireBaseUrl)\r\n                    let db = FirebaseContext.firestore().collection(\"users/trainer/sys_trainers\");\r\n                    db.doc(userCurrent.uid).update({\r\n                        photo: fireBaseUrl\r\n                      });\r\n                    })\r\n                    setIsChanging(true);\r\n                }\r\n            })\r\n          })\r\n        //   window.location.reload();\r\n          }\r\n      \r\n\r\n      class userDetails {\r\n        constructor (name, email, password, photo ) {\r\n            this.name = name;\r\n            this.email = email;\r\n            this.password = password;\r\n            this.photo= photo;\r\n        }\r\n        // toString() {\r\n        //     return this.name + ', ' + this.email + ', ' + this.password;\r\n        // }\r\n    }\r\n    \r\n    // Firestore data converter\r\n    var userDetailsConverter = {\r\n        toFirestore: function(userDetails) {\r\n            return {\r\n                name: userDetails.name,\r\n                email: userDetails.email,\r\n                password: userDetails.password,\r\n                photo: userDetails.photo\r\n                }\r\n        },\r\n        fromFirestore: function(snapshot, options){\r\n            const data = snapshot.data(options);\r\n            const det1 = new userDetails(data.name, data.email, data.password, data.photo);\r\n            return det1\r\n        }\r\n    }\r\n\r\n        function validateForm() {\r\n            return (\r\n            values.Oldpassword.length > 5 &&     //more validation checks needed for the old Password\r\n            values.Newpassword.length > 5 &&\r\n            values.Newpassword === values.ConfirmNewpassword\r\n            );\r\n        }\r\n        \r\n        React.useEffect(() => {\r\n            let user1 = FirebaseContext.auth().currentUser;\r\n            // let uID = FirebaseContext.firestore().collection(\"users\").doc(user1.uid)    \r\n            let db = FirebaseContext.firestore().collection(\"users/trainer/sys_trainers\");\r\n            let query = db.where('userId', '==', user1.uid);\r\n\r\n            query.withConverter(userDetailsConverter).get()\r\n            .then(snapshot => {\r\n                if (snapshot.empty) {\r\n                console.log('No matching documents.');\r\n                return;\r\n                }  \r\n\r\n                snapshot.forEach(doc => {\r\n                    var x = doc.data();\r\n                    setcurrentUserDetails(x)\r\n                // console.log(doc.id, '=>', x);\r\n                ;\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log('Error getting documents', err);\r\n            });\r\n        }, [userDetailsConverter])\r\n\r\n        async function handleChangeClick(event) {\r\n            event.preventDefault();\r\n\r\n            const user = FirebaseContext.auth().currentUser;\r\n            let db = FirebaseContext.firestore().collection(\"users/trainer/sys_trainers\");\r\n            if(values.Oldpassword===currentUserDetails.password){\r\n                db.doc(user.uid).update({\r\n                    password: values.Newpassword\r\n                    });\r\n                    // Get auth credentials from the user for re-authentication. The example below shows\r\n                    // email and password credentials but there are multiple possible providers,\r\n                    // such as GoogleAuthProvider or FacebookAuthProvider.\r\n                    const cred = FirebaseContext.auth.EmailAuthProvider.credential(\r\n                        user.email, \r\n                        currentUserDetails.password\r\n                    );\r\n                    FirebaseContext.auth().currentUser.reauthenticateWithCredential(cred)\r\n                    .then(() => {\r\n                    // User successfully reauthenticated.\r\n                    const newPass = values.Newpassword;\r\n                    console.log('Password updated successfully!');\r\n                    setIsChangingP(true)\r\n                    return FirebaseContext.auth().currentUser.updatePassword(newPass);\r\n                    \r\n                    \r\n                    })\r\n                    .catch((error) => { \r\n                        console.log(error); \r\n                    });\r\n                    \r\n                    // alert('Password changed successfully!');\r\n                    setIsChangingP(true);\r\n                    clearState()\r\n            }else{\r\n                // alert('Oops, please check Old Password!')\r\n                setIsnotChangingP(true);\r\n            }\r\n        } \r\n\r\n\r\n        const handleChange = (prop) => (event) => {\r\n            setValues({ ...values, [prop]: event.target.value });\r\n          };\r\n    \r\n          const handleClose = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }    \r\n                setIsChangingP(false);\r\n          };\r\n    \r\n          const closeUpload = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }\r\n                setIsChanging(false);\r\n          };\r\n    \r\n          const handleCloseNot = (event, reason) => {\r\n            if (reason === 'clickaway') {\r\n              return;\r\n            }\r\n                setIsnotChangingP(false);\r\n          };\r\n\r\n  return (\r\n    <Paper elevation={0} className={classes.root}>\r\n        <div className={classes.paper}>\r\n            <Grid alignItems='center' justify=\"center\" container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <ButtonBase className={classes.image}>\r\n                        <form onSubmit={handleFireBaseUpload}>\r\n                            <input \r\n                                accept=\"image/*\" \r\n                                className={classes.input} \r\n                                onChange={handleImageAsFile} \r\n                                id=\"icon-button-file\" \r\n                                type=\"file\" \r\n                            />\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <IconButton \r\n                                    type=\"submit\" \r\n                                    className={classes.uploadButton} \r\n                                    color=\"primary\" \r\n                                    component=\"span\"\r\n                                >\r\n                                    <PhotoCamera />\r\n                                </IconButton>\r\n                                <LoaderButton\r\n                                    type=\"submit\"\r\n                                    disabled={!imageAsFile}\r\n                                    isLoading={isChanging}\r\n                                    style={{\r\n                                        margin: '200px 0 0 25%',\r\n                                        width:'50%',\r\n                                        position: 'absolute',\r\n                                    }}\r\n                                >\r\n                                    UPLOAD\r\n                                </LoaderButton>\r\n                                <Snackbar open={isChanging} autoHideDuration={6000} onClose={closeUpload}>\r\n                                    <Alert onClose={closeUpload} severity=\"success\">\r\n                                        Great! Photo updated successfully.\r\n                                    </Alert>\r\n                                </Snackbar>\r\n                            </label>\r\n                        </form>\r\n                        <img \r\n                            className={classes.pPic}  \r\n                            src={\r\n                                    imageAsUrl.imgUrl || \r\n                                    currentUserDetails.photo || \r\n                                    'https://www.pngitem.com/pimgs/m/442-4426913_avatar-icon-png-white-png-download-white-person.png'\r\n                                }\r\n                            alt=''\r\n                        />\r\n                    </ButtonBase>\r\n                    <Grid style={{\r\n                        margin: 20\r\n                    }}>\r\n                        <Grid alignItems='left' justify=\"left\" container spacing={2}>\r\n                            <Grid item>\r\n                                <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                    {currentUserDetails.name}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" align='left' style={{ cursor: 'pointer', }}>\r\n                                    {currentUserDetails.email}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid alignItems='center' justify=\"center\" container spacing={2} xs={12} sm={6}>\r\n                    <form onSubmit={handleChangeClick}>\r\n                        <FormGroup className={clsx(classes.margin, classes.textField)} variant=\"outlined\">\r\n                            <Typography gutterBottom variant=\"h5\" align='left'>\r\n                                Change Password\r\n                            </Typography>\r\n                        </FormGroup>\r\n                        <FormGroup className={classes.margin}>\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='Old-Password'\r\n                                type= 'password'\r\n                                value={values.Oldpassword}\r\n                                onChange={handleChange('Oldpassword')}\r\n                                label='Old Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n                        \r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id='New-Password'\r\n                                type= 'password'\r\n                                value={values.Newpassword}\r\n                                onChange={handleChange('Newpassword')}\r\n                                label='New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <TextFieldMui\r\n                                style={{ width:'100%' }}\r\n                                id=' Cofirm-New-Password'\r\n                                type= 'password'\r\n                                value={values.ConfirmNewpassword}\r\n                                onChange={handleChange('ConfirmNewpassword')}\r\n                                label='Cofirm New Password'\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <FormGroup className={classes.margin} variant=\"outlined\">\r\n                            <LoaderButton\r\n                                type=\"submit\"\r\n                                disabled={!validateForm()}\r\n                                isLoading={isChangingP}\r\n                                style={{\r\n                                    // marginLeft: '10%',\r\n                                    width:'100%'\r\n                                }}\r\n                            >\r\n                                Change\r\n                            </LoaderButton>\r\n                        </FormGroup>\r\n                        <Snackbar open={isChangingP} autoHideDuration={6000} onClose={handleClose}>\r\n                            <Alert onClose={handleClose} severity=\"success\">\r\n                                Great! Password changed successfully.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                        <Snackbar open={isnotChangingP} autoHideDuration={6000} onClose={handleCloseNot}>\r\n                            <Alert onClose={handleCloseNot} severity=\"error\">\r\n                                Oops! Check Old Password.\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </form>\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\permissions.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\menu.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\views\\views.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\screens\\addUsers.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\mob.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\permissions.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\menu.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\views\\views.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\mobMenu.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainer\\components\\loader.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Admin\\components\\loader.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\components\\loader.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\styles\\colors.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\LiveSupport.js",["261"],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\QuizTests\\QuizTests.js",["262"],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Module.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\complete-payment\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\CartSucess\\index.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\MenuLive.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\LiveSupport\\Tabs.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\cart\\complete-payment\\country.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\Code.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\shared\\Menu\\Menu.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\Fundamentals\\Fundamentals.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\JavaScript\\JavaScript.js",[],"C:\\Users\\sdd\\skylla-learning-community\\client\\src\\App\\screens\\Trainee\\screens\\Module\\Coding\\VersionControl\\VersionControl.js",[],{"ruleId":"263","replacedBy":"264"},{"ruleId":"265","replacedBy":"266"},{"ruleId":"267","severity":1,"message":"268","line":197,"column":7,"nodeType":"269","endLine":211,"endColumn":4},{"ruleId":"267","severity":1,"message":"270","line":154,"column":9,"nodeType":"269","endLine":168,"endColumn":6},{"ruleId":"267","severity":1,"message":"271","line":107,"column":9,"nodeType":"269","endLine":121,"endColumn":6},{"ruleId":"267","severity":1,"message":"272","line":153,"column":9,"nodeType":"269","endLine":167,"endColumn":6},{"ruleId":"273","severity":1,"message":"274","line":3,"column":9,"nodeType":"275","messageId":"276","endLine":3,"endColumn":14},{"ruleId":"273","severity":1,"message":"277","line":5,"column":8,"nodeType":"275","messageId":"276","endLine":5,"endColumn":26},"no-native-reassign",["278"],"no-negated-in-lhs",["279"],"react-hooks/exhaustive-deps","The 'userDetailsConverter' object makes the dependencies of useEffect Hook (at line 234) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'userDetailsConverter' in its own useMemo() Hook.","VariableDeclarator","The 'userDetailsConverter' object makes the dependencies of useEffect Hook (at line 201) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'userDetailsConverter' in its own useMemo() Hook.","The 'userDetailsConverter' object makes the dependencies of useEffect Hook (at line 145) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'userDetailsConverter' in its own useMemo() Hook.","The 'userDetailsConverter' object makes the dependencies of useEffect Hook (at line 200) change on every render. Move it inside the useEffect callback. Alternatively, wrap the initialization of 'userDetailsConverter' in its own useMemo() Hook.","no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'QuestionAnswerIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]